library(glmnet)
library(ROCR)
library(tidyverse)
library(data.table)
library(lubridate)
diagnoses <- fread('data/icd_diagnosis.csv')
View(diagnoses)
diagnoses[,Date := ymd(ContactDTS)]
diagnoses[,AD := (grepl("Dementia|Alzheimer's|cognitive impairment|frontotemporal dementia",Diagnosis_Name,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",Code,ignore.case = TRUE)) & !grepl("Obstructive hydrocephalus",Diagnosis_Name,ignore.case = TRUE)];
diagnoses[,AD := (grepl("Dementia|Alzheimer's|cognitive impairment|frontotemporal dementia",DiagnosisNM,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",Code,ignore.case = TRUE)) & !grepl("Obstructive hydrocephalus",DiagnosisNM,ignore.case = TRUE)];
diagnoses[,AD := (grepl("Dementia|Alzheimer's|cognitive impairment|frontotemporal dementia",DiagnosisNM,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",ICD9CD,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",ICD10CD,ignore.case = TRUE)) & !grepl("Obstructive hydrocephalus",DiagnosisNM,ignore.case = TRUE)];
View(diagnoses[AD==1])
View(diagnoses[AD==1][,.N,by=.(DiagnosisNM)][order(-N)])
diagnoses[,AD := (grepl("Dementia|Alzheimer's|cognitive impairment|frontotemporal dementia",DiagnosisNM,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",ICD9CD,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",ICD10CD,ignore.case = TRUE)) & !grepl("hydrocephalus",DiagnosisNM,ignore.case = TRUE)];
meds<-fread("data/medications.csv")
diagnoses <- fread('data/icd_diagnosis.csv')
diagnoses[,Date := ymd(ContactDTS)]
meds[,Date := mdy(Medication_Date)]
View(meds)
meds[,Date := ymd(OrderDTS)]
AD_Meds <- c("Galantamine", "Donepezil", "Rivastigmine", "Razadyne", "Razadyne ER", "Aricept", "Exelon","Namenda","Memantine");
meds[,AD := grepl(paste(AD_Meds, collapse="|"),Medication,ignore.case = T)]
meds[,AD := grepl(paste(AD_Meds, collapse="|"),MedicationDSC,ignore.case = T)]
diagnoses[,AD := (grepl("Dementia|Alzheimer's|cognitive impairment|memory loss|frontotemporal dementia",DiagnosisNM,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",ICD9CD,ignore.case = TRUE) | grepl("^290|^294|^331|G30|G31|780.93",ICD10CD,ignore.case = TRUE)) & !grepl("hydrocephalus",DiagnosisNM,ignore.case = TRUE)];
structured_variables <- data.table(EMPI = unique(c(diagnoses$EMPI,meds$EMPI)))
View(structured_variables)
structured_variables[diagnoses[AD==1,.N,by=.(EMPI)],on=.(EMPI),Dx_Count := i.N]
structured_variables[meds[AD==1,.N,by=.(EMPI)],on=.(EMPI),Med_Count := i.N]
structured_variables[is.na(structured_variables)] <- 0
View(structured_variables)
tanish <- fread('data/20K_sample.csv')
View(tanish)
View(structured_variables)
structured_variables <- data.table(EMPI = unique(c(diagnoses$PatientID,meds$PatientID)))
structured_variables[diagnoses[AD==1,.N,by=.(EMPI)],on=.(EMPI),Dx_Count := i.N]
structured_variables[diagnoses[AD==1,.N,by=.(PatientID)],on=.(PatientID),Dx_Count := i.N]
structured_variables <- data.table(PatientID = unique(c(diagnoses$PatientID,meds$PatientID)))
structured_variables[diagnoses[AD==1,.N,by=.(PatientID)],on=.(PatientID),Dx_Count := i.N]
structured_variables[meds[AD==1,.N,by=.(PatientID)],on=.(PatientID),Med_Count := i.N]
structured_variables[is.na(structured_variables)] <- 0
View(structured_variables)
structured_variables[,AD_Med_or_ICD_Code := ifelse(Dx_Count > 0 | Med_Count > 0,1,0)]
View(structured_variables[AD_Med_or_ICD_Code ==1])
View(meds[PatientID=='Z11459914'])
tanish[,Binary_CI := ifelse(prediction == 2,1,0)]
View(tanish)
tanish[,patient_CI := ifelse(any(Binary_CI),1,0),by=.(patient_id)]
tanish[,patient_CI := NULL]
tanish[,patient_CI := ifelse(any(as.logical(Binary_CI)),1,0),by=.(patient_id)]
View(tanish)
tanish[8514]
tanish_predictions <- tanish[,.SD[1],by=.(patient_id)]
View(tanish_predictions)
tanish[,num_sequences_patient := .N,by=.(patient_id)]
tanish_predictions <- tanish[,.SD[1],by=.(patient_id)][,.(patient_id,patient_CI,num_sequences_patient)]
View(tanish_predictions)
tanish[structured_variables,on=.(patient_id=PatientID),`:=` (Dx_Count = i.Dx_Count, Med_Count = i.Med_Count, AD_Med_or_ICD_Code = i.AD_Med_or_ICD_Code)]
tanish_predictions[structured_variables,on=.(patient_id=PatientID),`:=` (Dx_Count = i.Dx_Count, Med_Count = i.Med_Count, AD_Med_or_ICD_Code = i.AD_Med_or_ICD_Code)]
View(tanish_predictions)
# any missing data?
nrow(tanish_predictions[is.na(AD_Med_or_ICD_Code)]
)
tanish_predictions[,.N,by=.(patient_CI,AD_Med_or_ICD_Code)]
apoe <- fread('data/apoe/Partners_biobank_APOE_nodup.csv')
View(apoe)
bib <- rbindlist(list(fread('data/apoe/sd587_03212118253982866_6375194824947826181_Bib.txt'),fread('data/apoe/sd587_03212118253982866_6375194824947826182_Bib.txt')))
View(bib)
tanish[rbindlist(list(meds,diagnoses),fill =T),on=.(patient_id = PatientID),EMPI := i.EMPI]
tanish_predictions <- tanish[,.SD[1],by=.(patient_id)][,.(patient_id,patient_CI,num_sequences_patient)]
tanish_predictions[structured_variables,on=.(patient_id=PatientID),`:=` (Dx_Count = i.Dx_Count, Med_Count = i.Med_Count, AD_Med_or_ICD_Code = i.AD_Med_or_ICD_Code)]
View(tanish_predictions)
tanish_predictions <- tanish[,.SD[1],by=.(patient_id)][,.(patient_id,patient_CI,num_sequences_patient,EMPI)]
tanish_predictions[structured_variables,on=.(patient_id=PatientID),`:=` (Dx_Count = i.Dx_Count, Med_Count = i.Med_Count, AD_Med_or_ICD_Code = i.AD_Med_or_ICD_Code)]
View(tanish_predictions)
apoe[bib,on=.(subject_id),EMPI := i.EMPI]
apoe[bib,on=.(subject_id = Subject_Id),EMPI := i.EMPI]
View(apoe)
tanish_predictions[apoe,on=.(EMPI),apoe := i.APOE]
tanish_predictions[apoe,on=.(EMPI),APOE := i.APOE]
View(tanish_predictions)
tanish_predictions[,apoe := NULL]
View(tanish_predictions)
View(tanish[patient_id=='	Z6453666'])
View(tanish[patient_id=='Z6453666'])
fwrite(tanish_predictions,file='data/tanish_predictions_with_structured_features.csv')
View(tanish_predictions)
# patient cognitive impairment by whether they have med/code
tanish_predictions[,.N,by=.(patient_CI,AD_Med_or_ICD_Code)]
View(tanish[patient_id %in% tanish_predictions[patient_CI == 0 & AD_Med_or_ICD_Code == 1,patient_id]])
View(tanish[patient_id %in% tanish_predictions[patient_CI == 1 & AD_Med_or_ICD_Code == 0,patient_id]])
tanish_predictions[,.N,by=.(patient_CI,AD_Med_or_ICD_Code,APOE)]
tanish <- fread('data/sample_8_12.csv.csv')
tanish <- fread('data/sample_8_12.csv.csv')
tanish <- fread('data/sample_8_12.csv')
# need EMPI for tanish's set, get from EDW data
tanish[rbindlist(list(meds,diagnoses),fill =T),on=.(patient_id = PatientID),EMPI := i.EMPI]
# 0 = no, 1 = neither, 2 = CI
tanish[,Binary_CI := ifelse(prediction == 2,1,0)]
# 0 = no, 1 = neither, 2 = CI
tanish[,Binary_CI := ifelse(predictions == 2,1,0)]
View(tanish)
# at least one CI, give 1 for patient level cognitive impairment
tanish[,patient_CI := ifelse(sum(Binary_CI) > 0,1,0),by=.(patient_id)]
tanish[,num_sequences_patient := .N,by=.(patient_id)]
# one row per patient
tanish_predictions <- tanish[,.SD[1],by=.(patient_id)][,.(patient_id,patient_CI,num_sequences_patient,EMPI)]
View(tanish_predictions)
tanish_predictions[,.N,by=.(patient_CI)]
# merge structured data back on
tanish_predictions[structured_variables,on=.(patient_id=PatientID),`:=` (Dx_Count = i.Dx_Count, Med_Count = i.Med_Count, AD_Med_or_ICD_Code = i.AD_Med_or_ICD_Code)]
# any missing data? NO
nrow(tanish_predictions[is.na(AD_Med_or_ICD_Code)])
# patient cognitive impairment by whether they have med/code
tanish_predictions[,.N,by=.(patient_CI,AD_Med_or_ICD_Code)]
apoe <- fread('data/apoe/Partners_biobank_APOE_nodup.csv')
bib <- rbindlist(list(fread('data/apoe/sd587_03212118253982866_6375194824947826181_Bib.txt'),fread('data/apoe/sd587_03212118253982866_6375194824947826182_Bib.txt')))
# join back EMPI from mapping
apoe[bib,on=.(subject_id = Subject_Id),EMPI := i.EMPI]
tanish_predictions[apoe,on=.(EMPI),APOE := i.APOE]
fwrite(tanish_predictions,file='data/tanish_predictions_with_structured_features.csv')
#view false positives
View(tanish[patient_id %in% tanish_predictions[patient_CI == 1 & AD_Med_or_ICD_Code == 0,patient_id]])
fwrite(tanish[patient_id %in% tanish_predictions[patient_CI == 1 & AD_Med_or_ICD_Code == 0,patient_id]][order(patient_id,-predictions)],file='data/false_positive_seqeunces.csv')
fwrite(tanish[patient_id %in% tanish_predictions[patient_CI == 1 & AD_Med_or_ICD_Code == 0,patient_id]][order(patient_id,-predictions)],file='data/false_positive_sequences.csv')
library(ROCR)
View(tanish)
tanish_test_set <- fread("data/probabilities_test_set.csv")
View(tanish_test_set)
tanish_test_set <- fread("data/probabilities_test_set.csv")
acc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'acc')
tanish_test_set[,annotator_label := ifelse(annotator_label == 2,1,0)]
acc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'acc')
acc <- data.table(cutoffs = acc@x.values[[1]],accuracy = acc@y.values[[1]])
threshold <- acc[acc[,.I[which.max(accuracy)]],cutoffs]
View(acc)
threshold
tanish_test_set[annotator_label == 0,probability := 1 - probability]
acc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'acc')
acc <- data.table(cutoffs = acc@x.values[[1]],accuracy = acc@y.values[[1]])
threshold <- acc[acc[,.I[which.max(accuracy)]],cutoffs]
threshold
sens <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'sens')
View(sens)
sens <- data.table(cutoffs = sens@x.values[[1]],sens = sens@y.values[[1]])
View(sens)
spec <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'spec')
spec <- data.table(cutoffs = spec@x.values[[1]],spec= spec@y.values[[1]])
View(spec)
spec[cutoffs == threshold]
tanish_test_set[,mean(probability),by=.(annotator_label)]
tanish_test_set[,qunatile(probability),by=.(annotator_label)]
tanish_test_set[,quantile(probability),by=.(annotator_label)]
tanish_test_set[,round(quantile(probability),5),by=.(annotator_label)]
# put your test set with binary probs here, 1 col named 'probability' and one named 'annotator_label'
tanish_test_set <- fread("data/test_binary_classification.csv")
View(tanish_test_set)
View(tanish_test_set)
acc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'acc')
acc <- data.table(cutoffs = acc@x.values[[1]],accuracy = acc@y.values[[1]])
threshold <- acc[acc[,.I[which.max(accuracy)]],cutoffs]
sens <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'sens')
sens <- data.table(cutoffs = sens@x.values[[1]],sens = sens@y.values[[1]])
sens[cutoffs == threshold]
View(tanish_test_set)
View(tanish_test_set)
nrow(tanish_test_set[probability > .5])
nrow(tanish_test_set[probability > .56])
# put your test set with binary probs here, 1 col named 'probability' and one named 'annotator_label'
tanish_test_set <- fread("data/test_binary_classification.csv")
acc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'acc')
acc <- data.table(cutoffs = acc@x.values[[1]],accuracy = acc@y.values[[1]])
threshold <- acc[acc[,.I[which.max(accuracy)]],cutoffs]
sens <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'sens')
sens <- data.table(cutoffs = sens@x.values[[1]],sens = sens@y.values[[1]])
sens[cutoffs == threshold]
spec <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'spec')
spec <- data.table(cutoffs = spec@x.values[[1]],spec= spec@y.values[[1]])
spec[cutoffs == threshold]
auc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'auc')
auc@y.values
acc <- data.table(cutoffs = acc@x.values[[1]],accuracy = acc@y.values[[1]])
View(acc)
View(tanish_test_set)
tanish_test_set[,.mean(probability),by=.(annotator_label)]
tanish_test_set[,.(mean(probability)),by=.(annotator_label)]
# put your test set with binary probs here, 1 col named 'probability' and one named 'annotator_label'
tanish_test_set <- fread("data/test_binary_classification.csv")
acc <- performance(prediction(tanish_test_set$probability,tanish_test_set$annotator_label),measure = 'acc')
acc <- data.table(cutoffs = acc@x.values[[1]],accuracy = acc@y.values[[1]])
threshold <- acc[acc[,.I[which.max(accuracy)]],cutoffs]
tanish_test_set[,.(.N),by=.(annotator_label)]
245/(245+48)
View(tanish_test_set[probability > .88 & annotator_label == 0])
